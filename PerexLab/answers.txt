Terrence Ho
804793446


1) Explain why the instructions in the trace did not produce the correct
mathematical result. Which instructions caused the problem, exactly?

A: When emacs is computing with numbers, it treats all objects as it's own
special object called an Elisp Object that uses the two last bits of the object
as a tagged pointer for easy access.  Thus, this only leaves 62 bits for information  
such as numbers.  Emacs usually shifts right by two bits to multiply correctly,
but shifting numbers inherently loses significant digits, and the instruction
at lea 0x2(,%rbp,4),%rax shifts left to make room for the tagged pointer at
the end of the integer, but loses the two most significant digits in the
process and truncates the number, explaining the wrong mathematical result. 

2) Explain why the shell command emacs -Q -batch -eval '(print
most-negative-fixnum)' outputs -2305843009213693952. Where did the number come
from? Explain in terms of the Emacs source code.

A: -2305843009213693952 is 2^61.  Remembering that emacs uses two bits out of 64 
of an integer to hold a tagged pointer, we have 62 bits of information available 
for the integer.  Half of 2^62 is used to hold negative numbers, so 2^61.

3)Explain why the shell command emacs -Q -batch -eval '(print (*
most-positive-fixnum most-positive-fixnum most-positive-fixnum
most-positive-fixnum))' outputs only 1.

A:  most-positive-fixum prints out the maximum integer emacs can hold.
Multiplying the most positive number by the most positive number will overflow,
resulting in one.  Multiplying most-positive-fixum 4 times still results in 1. 

4) The Emacs executable was compiled with GCC's -O2 option. Suppose it had also
been compiled with -fsanitize=undefined. Explain any problems the trace would
run into, or if there would not be a problem explain why not.

A: The emacs code already checks for overflow, and will change it's behavior if
it detects overflow.  -fsanitize=undefined is a fast underfined behavior checker
that will also check for overflow, which is essentially redudant.  With
-fsanitize=underfined we check for overflow twice, which will not make our
program crash but instead slow it down with needless checks, as well as making
our program size larger.

5) There is a recently-discovered security vulnerability in Emacs 25.2, which
you can exercise by running emacs -Q -batch -eval '(print (format-time-string
"%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "0")))'. Briefly
describe the bug's low-level manifestation by crashing Emacs, using GDB's
backtrace command, and following up with any other GDB commands that you think
might be of interest.'

A: I used the command backtrace and backtrace full to look at what caused the
with gdb.  The crash appears to be related to emacs's TZ environment variable,
which calculates time and date.  The command put into emacs attempts to modify
the TZ variable that holds the time string by adding a bnuch of extra "X"s.
However, it does not want to create a new TZ variable and change the time that
way because other threads of emacs may be using that TZ variable, so instead it
attempts to modify the variable in place.  The TZ variable was created with a
large amount of memory previously, but if the new string is too large it cannot
simply allocate new memory because we cannot change the TZ variable. Thus,
previous memory outside the TZ variable may be overwritten when the TZ string is
copied into the TZ variable.  Then when a function is called to memory that was
previously held in the overwritten memory space, it crashes because the memory
has changed.  
