Terrence Ho
804793446

_Bool
testovf (long n)
{
    return n + 9223372036854775807 < n;
}


Compiling with -o2 only produces a function that returns zero everytime, because
it xors %eax,%eax and then returns 0 because the XOR of the same number produces
zero.  This is because the function does not check if adding n + 9223372036854775807 
will overflow and simply assumes that the function is always false, because 
adding a positive number to n will always make it bigger.

Compiling with -O2 -fwrapv produces a function that will wrap around correctly
before doing the comparison, preventing an overflow.  If it overflows, it may
return true, because the resulting number may be less than original n.  

Compiling with -O2 -fsanitize=undefined produces a function that will execute
differently if it detected any overflow, producing a runtime error but
continuing to execute anyway.  If there is overflow, the function jumps to .L6
and calls __ubsan_handle_add_overflow to produce an error message before
proceding to .L2, which compares the two numbers and determines if it is false.

