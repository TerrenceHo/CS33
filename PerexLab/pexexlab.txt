Terrence Ho
804793446

Instructions used

gdb ~eggert/bin64/bin/emacs-25.2  
This instruction on starts up emacs in gdb.  I used this once everytime before I
started a debugging session.

(gdb) break Ftimes
This was used to set a breakpoint at Ftimes, the function that we are stepping
through.  I used this command once everytime after I started emacs with gdb

(gdb) r -Q -batch -eval '(print (* 1250284240 -1844255039))'
This command was used after setting a breakpoint at Ftimes, which let the gdb
debugger run until it hit a breakpoint at Ftimes.  After this, we can begin to
step through the function's machine code.

(gdb) set disassemble-next-line on
This command was used once we started stepping through the machine code of the
function, so that we can see the assembly level instructions of each line as it
is being executed.

(gdb) si
This command was used to step through the machine level code of the Ftimes
function, and was used in conjunction with set disassemble-next-line on to give
use the disassembled version of the machine code.  si stepped into functions,
and also told us when we changed lines or functions by displaying the line
number in the Ftimes source code.  Lastly, this function gave us the amount of
memory each instruction took up, in bytes

(gdb) info registers OR info registers $rax (or some other register)
This command gave us the information about the registers, so that we could keep
track of information like variables that are being passed around.  

(gdb) disas OR disas /m OR disas /r
This command was occasionally used to show the disassembled code, although once
found the command to disassemble-next-line, I never used this after.  

(gdb) set logging on
This command was used to put the output to a gdb.txt file, in case I needed to
look back at the commands I used.


What didn't work:
It took me a while to even figure out how to run gdb with emacs, because I
previously kept using gdb emacs, not the eggert version.  I rarely used disas
once I figured out that set disassemble-next-line on was giving me everything I
needed.  I kept trying to use info func Ftimes to debug it, but I realized that
didn't give me any low level information about the function while it was being
debugged.  

My routine:
1) gdb ~eggert/bin64/bin/emacs-25.2
2) (gdb) break Ftimes
3) (gdb) r -Q -batch -eval '(print (* 1250284240 -1844255039))'
4) (gdb) set logging on
5) (gdb) set disassemble-next-line on
6) (gdb) si
7) (gdb) info registers OR info registers $rax (or some other register)
Repeat steps 6) and 7) until I was done stepping through the function.  

