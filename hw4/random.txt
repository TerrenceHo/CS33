Terrence Ho
804793446

// 2.89


A) (float) x == (float) dx
This is always true.  When an int is converted to float, there may be rounding.
However, converting an int to a double, there is no chance of overflow because
the double's range exceeds that of an ints and has greater precision.
Convertinga double to a float may round, but it will round in the same way an
int->float rounds, so this will always be equal.  

B) dx - dy == (double) (x-y)
This is not always true.  Because you subtract the ints first, if the 
subtraction results in overflow, then you will lose digits, whereas with doubles, 
you will not overflow with either INT_MAX or INT_MIN because the double is large
enough to fit INT_MAT or INT_MIN.  

C) (dx + dy) + dz = dx + (dy + dz)
Always true, because order of operations does not affect doubles.  Because the
doubles started out as ints, the largest possible value they could be would be
INT_MAX or INT_MIN, and adding these values together could not cause overflow,
because the double has enough bits to hold all these values.  Thus, this cannot
overflow regardless of the order of operations, and so is always true.

D) (dx * dy) * dz = dx * (dy * dz)
There is no chance of overflow, but the double could lose precision if the
multipled bits exceeded 52 bits, and rounding values occured differently.  If
dx = 2^30, dy = 3^30, dz = 4^30, then (dx * dy) would round to even first, while
(dy * dz) would round to even as well, which could cause different precision
values on both sides.  Thus, with very large numbers, you can lose precision
when the order of operations is different, and then they will not be equal.

E) dx / dx == dz / dz
This does not always equal true. If dx == +0.0 or -0.0, then 0.0/0.0 would 
result in NAN, while dz != 0.0.  Thus, having a NAN would make this operation invalid.

